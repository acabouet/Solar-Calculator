<?php

/**
 * @FILE Primary module file containing core hooks.
 */

/*
 * Implements hook_menu()
 */
function subsolar_seasonal_form_menu() {
    $items = array();
    $items['subsolar-seasonal-form'] = array(
        'title' => 'Sub Solar Seasonal Form',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('subsolar_seasonal_form'),
        'access arguments' => array('access content'),
        'type' => MENU_NORMAL_ITEM,
    );


    return $items;
}


/**
 * Build the multi-step ajax form.
 */

function subsolar_seasonal_form($form, &$form_state) {
    // rather than try and catch a state change for the slider on first load of the seasonal form,
    // we calculate the style string (slider bar fill amount) and add it to the block_style 'style'
    $max_blocks = $_SESSION['max_blocks'];
    $percent_per_step = round(100/$max_blocks) + 1;
    $rec_blocks = $_SESSION['rec_blocks'];
    $slide_percent = ($rec_blocks - 1) * $percent_per_step;
    $style_string = 'max-height: 24px; border-radius: 12px; background: linear-gradient(to right, rgb(215, 215, 215) ' . $slide_percent . '%, ' . 'rgb(255, 255, 255) 1%);';

    // If $form_state['step'] is not set, set it to 1
    $form_state['step'] = isset($form_state['step']) ? $form_state['step'] : 1;

    $form['#attributes']['class'][] = 'pure-form-stacked';

    // Add a wrapper div for AJAX
    $form['#prefix'] = '<div id="subsolar_seasonal_form">';
    $form['#suffix'] = '</div>';

    //Attach styles and javascript
    $form['#attached']['css'] = array(
        drupal_get_path('module', 'subsolar_form') . '/css/subsolar_form.css'
    );

    $form['#attached']['js'] = array(
        drupal_get_path('module', 'subsolar_seasonal_form') . '/js/subsolar_seasonal_form.js' => array(
            'type' => 'file',
        )
    );

    // Display different form field groups depending on current step
    switch($form_state['step'])
    {
        // Step 1
        case 1:
            $monthly_summer = '';
            $monthly_winter = '';

            //Set account value if it's already been entered
            if(isset($form_state['values']['step_1']['monthly_summer']))
            {
                $monthly_summer = $form_state['values']['step_1']['monthly_summer'];
            }
            elseif(isset($form_state['storage']['step_1']['monthly_summer']))
            {
                $monthly_summer = $form_state['storage']['step_1']['monthly_summer'];
            }

            //Set customer name if it's already been entered
            if(isset($form_state['values']['step_1']['monthly_winter']))
            {
                $monthly_winter = $form_state['values']['step_1']['monthly_winter'];
            }
            elseif(isset($form_state['storage']['step_1']['customer_name']))
            {
                $monthly_winter = $form_state['storage']['step_1']['monthly_winter'];
            }


            $form['step_1'] = array(
                '#type' => 'fieldset',
                '#title' => t('No account number? No problem.'),
                '#weight' => 0,
                '#collapsible' => FALSE,
                '#tree' => TRUE,
                '#attributes' => array(
                    'class' =>  array('cl-u1'),
                ),
            );

            $form['step_1']['intro'] = array(
                '#markup' => "<p>You can still calculate your potential solar usage, energy savings, and environmental impact
                by entering your contact information and estimated monthly usage costs below.</p>"
            );

            $form['step_1']['seasonal_calc_intro'] = array(
                '#markup' => "<h3>Average monthly energy bill for summer and winter</h3><p class='gray-small'>(this will be used to calculate
                 the recommended number of solar energy blocks you can apply for)</p>"
            );


            $form['step_1']['monthly_summer'] = array(
                '#type' => 'textfield',
                '#title' => t('Monthly Summer Estimate (in dollars)'),
                '#required' => TRUE,
                '#default_value' => $monthly_summer,
                '#attributes' => array(
                    'id' => 'res-monthly-summer',
                    'placeholder' => '123',
                )
            );

            $form['step_1']['monthly_winter'] = array(
                '#type' => 'textfield',
                '#title' => t('Monthly Winter Estimate (in dollars)'),
                '#required' => TRUE,
                '#default_value' => $monthly_winter,
                '#attributes' => array(
                    'id' => 'res-monthly-winter',
                    'placeholder' => '123',
                )
            );


            break;

        // Step 2
        case 2:

            $form['step_2'] = array(
                '#type' => 'fieldset',
                '#title' => t('Calculate your solar potential'),
                '#weight' => 0,
                '#collapsible' => FALSE,
                '#tree' => TRUE,
                '#attributes' => array(
                    'class' =>  array('cl-u1'),
                ),
            );


            $form['step_2']['intro'] = array(
                '#markup' => "<p>Based on your average energy bills we recommend starting with <b>[". $_SESSION['rec_blocks']."]</b> solar blocks to maximize your energy potential. The maximum amount of blocks you can apply for based on your usage, is <b>[". $_SESSION['max_blocks']."]</b>. Use the slider to adjust your
    solar block level and see how using more or less solar can affect your annual energy costs and environment impact.</p>"
            );

            $form['step_2']['processed-billing-data'] = array
            (
                '#type' => 'hidden',
                '#default_value' =>  isset($form_state['storage']['step_2']['processed-billing-data']) ? $form_state['storage']['step_2']['processed-billing-data'] : $form_state['values']['step_2']['processed-billing-data'],
                '#attributes' => array(
                    'class' => array('processed-billing-data'),
                )
            );

            $form['step_2']['new-billing-data'] = array
            (
                '#type' => 'hidden',
                '#default_value' =>  isset($form_state['values']['step_2']['new-billing-data']) ? $form_state['values']['step_2']['new-billing-data'] : 0,
                '#attributes' => array(
                    'class' => array('new-billing-data'),
                ),
            );

            $form['step_2']['blocks'] = array(
                '#type' => 'item',
                '#title' => t(''),
                '#markup' => '

                        <div class="full-container cl-u1 cl-uxl-1 pure-g">
                            <div class="calculate-block cl-u1 cl-ularge-1-2">
                                <div class="circle">
                                    <input type="number" id="slideBlocks" value="" onfocus="this.blur()" readonly />
                                </div>
                                <div class="calculate-right-content">
                                    <h3>Solar Blocks</h3>
                                    <p>We recommend <b>['. $_SESSION["rec_blocks"].']</b> blocks to match your current usage. </p>
                                </div>
                            </div><div class="calculate-block cl-u1 cl-ularge-1-2">
                                <div class="circle">
                                    <input type="text" id="monthlyBill" value="$0" onfocus="this.blur()" readonly />
                                </div>
                                <div class="calculate-right-content">
                                    <h3>Average Monthly Bill Difference </h3>
                                    <p>See the full table below to compare your monthly energy costs with and without solar.</p>
                                </div>
                            </div>
                        </div>',
            );

            $form['step_2']['block_slider'] = array(
                '#type' => 'rangefield',
                '#min' => 1,
                '#max' => $_SESSION['max_blocks'],
                '#step' => 1,
                '#prefix' => "<div class='range-holder'>",
                '#suffix' => "</div>",
                '#attributes' => array(
                    'class' =>  array('range', 'block-slider')
//                    'style' => $style_string,
                ),
                '#ajax' => array(
                    'callback' => 'seasonal_block_slider_change_ajax_form_callback',
                    'event' => 'change',
                ),
            );

            $form['step_2']['blocks_2'] = array(
                '#type' => 'item',
                '#title' => t(''),
                '#markup' => '
                        <div class="full-container cl-u1 cl-uxl-1 pure-g">
                            <div class="calculate-block cl-u1 cl-ularge-1-3">
                                <div class="calculate-content-block">
                                    <input type="number" id="milesNotDriven" value="" onfocus="this.blur()" readonly />
                                    <img src="sites/default/files/icons/car-icon.png" alt="Car" class="miles-not" />
                                    <h3>Miles not driven</h3>
                                    <hr />
                                    <p>Choosing Subscriber Solar is equivalent to driving fewer miles</p>
                                </div>
                            </div><div class="calculate-block cl-u1 cl-ularge-1-3">
                                <div class="calculate-content-block">
                                    <input type="number" id="treesPlanted" value="" onfocus="this.blur()" readonly />
                                    <img src="sites/default/files/icons/tree-icon.png" alt="Tree" />
                                    <h3>Trees Planted </h3>
                                    <hr />
                                    <p>Purchasing energy from Subscriber Solar is equivalent to putting more trees on the earth</p>
                                </div>
                            </div><div class="calculate-block cl-u1 cl-ularge-1-3">
                                <div class="calculate-content-block">
                                    <input type="number" id="co2Saved" value="" onfocus="this.blur()" readonly />
                                    <img src="sites/default/files/icons/co2-icon.png" alt="C02" class="tons-saved" />
                                    <h3>Tons of CO<sub>2</sub> Saved </h3>
                                    <hr />
                                    <p>Choosing Subscriber Solar prevents more CO2 from entering the atmosphere</p>
                                </div>
                            </div>
                        </div>
                         <p class="calculation-source">Based on the U.S. Environmental Protection Agency Greenhouse Gas Equivalencies Calculator for the average customer living in the western region.</p>
                        <hr />',
            );

            $header = array(
                'accounting_period' => t('Season'),
                'kwh_usage' => t('kWh Used'),
                'without_solar' => t('Without Solar'),
                'with_solar' => t('With Solar')
            );


            $form['step_2']['usage'] = array
            (
                '#theme' => 'table',
                '#header' => $header,
                '#rows' => $form_state['storage']['usage_table_data'],
                '#empty' => t('No usage data found.'),
                '#attributes' => array(
                    'class' => array('pure-table','pure-table-striped', 'table-custom', 'usage-table'),
                ),
                '#prefix' => "
                                <h1>Compare your energy usage</h1>
                                <p>Based on your energy usage during the summer and winter seasons, we've projected the difference in your energy costs without and with solar energy.</p>
                             ",
                '#suffix' => "<hr>",
            );

            $form['step_2']['reserve_cta'] = array(
                '#markup' => "
                 <h1>Ready to reserve?</h1>
                 <p><strong>Contact Rocky Mountain Power at 1-844-813-3971 to complete your reservation request.</strong>
                 Our customer service lines are open 24 hours per day, seven days a week.</p>"
            );

            break;


    } //end switch



    //Container for forward and back buttons
    $form['buttons'] = array(
        '#type' => 'container',
    );


    //Checks to make sure we're not on the last step of the form before showing the forward button
    if($form_state['step'] !== 2) {
        $form['buttons']['forward'] = array(
            '#type' => 'submit',
            '#value' => t('Next'),
            '#attributes' => array('class' => array('pure-button', 'button-custom')),
            '#ajax' => array(
                'wrapper' => 'subsolar_seasonal_form',
                'callback' => 'subsolar_seasonal_form_ajax_callback',
            ),
        );
    }

    //Show a submit button if we're on the last step of the form
    else {
        $form['buttons']['homepage'] = array(
            '#type' => 'submit',
            '#value' => t('Back to Homepage'),
            '#attributes' => array('class' => array('pure-button', 'button-custom')),
            '#submit' => array('subsolar_seasonal_form_finish_submit'),
        );
    }

    return $form;

}

/**
 * Basic form validation, checks if usage fields contain numbers
 *
 */
function subsolar_seasonal_form_validate($form, $form_state) {

    switch ($form_state['step']) {
        case "1":

            // Check that average bills only contain numbers
            if(!preg_match('/^[0-9]+(?:\.[0-9]+)?$/', $form_state['values']['step_1']['monthly_summer'])) {
                form_set_error('step_1', t('Your monthly bill average can only contain numbers.'));
            }


            if(!preg_match('/^[0-9]+(?:\.[0-9]+)?$/', $form_state['values']['step_1']['monthly_winter'])) {
                form_set_error('step_1', t('Your monthly bill average can only contain numbers.'));
            }

            break;
    }

}

//Helper function to set sessions
function _subsolar_seasonal_form_session($key, $value = null) {
    if (isset($value)) {
        unset($_SESSION[$key]);
        $_SESSION[$key] = $value;
    }

    if (isset($_SESSION[$key])) {
        return $_SESSION[$key];
    }
}

//helper function to clear sessions
function _subsolar_seasonal_form_clear_session($key) {
    if (isset($_SESSION[$key])) {
        unset($_SESSION[$key]);
    }
}

//Helper function to save and sort processed usage and billing data
function process_seasonal_usage_data($datafield){
    //Clear all previous sessions
    _subsolar_seasonal_form_clear_session('processed_data');
    _subsolar_seasonal_form_clear_session('sorted_data');

    //Save processed data to the session
    _subsolar_seasonal_form_session('processed_data', $datafield);

    //Clean it up
    $cleaned_data = html_entity_decode($_SESSION['processed_data']);
    $processed_usage_data = drupal_json_decode($cleaned_data);

    //Sort by date ascending
    foreach ($processed_usage_data as $key => $part) {
        $sort[$key] = strtotime($part['accounting_period']);
    }
    array_multisort($sort, SORT_ASC, $processed_usage_data);


    _subsolar_seasonal_form_session('sorted_data', $processed_usage_data);

    //return sorted data
    return $processed_usage_data;
}


//General on submit function for form
function subsolar_seasonal_form_submit($form, &$form_state) {

    //get current form step
    $step = $form_state['step'];

    //Save to form storage so form values persist between steps
    $form_state['storage']['step_'. $step] = $form_state['values']['step_'. $step];
    $form_state['storage']['usage_table_data'] = '';

    //Pause at step 1 to prepare user entered bill data for seasonal calculator
    //This part needs to be updated to create an array of data that matches the values required to be passed to the seasonal version of the solar calculator
    if($step == 1) {


        //Get summer and winter kwh_usage @TODO this needs to be processed as monthly bill prices
        $summer_usage = $form_state['values']['step_1']['monthly_summer'];
        $winter_usage = $form_state['values']['step_1']['monthly_winter'];

        //Conver usage data to dollar amounts
        $withoutSolar_tier1_multiplier = 0.0885;
        $withoutSolar_tier2_multiplier = 0.1031;
        $withoutSolar_tier2_hot_multiplier = 0.1154;
        $withoutSolar_tier3_hot_multiplier = 0.1445;
        $withoutSolar_normalBill_tier1_multiplier = 400;
        $summer_tier_one =  452.028;
        $summer_tier_two = 519.931;
        $summer_tier_three = '';
        $winter_tier_one = 452.028;
        $winter_tier_two = 0;


        // Summer conversion from dollar to kwh
        if ($summer_usage < 40) {
            $summer_tier_one = $summer_usage / $withoutSolar_tier1_multiplier;
            $summer_usage = floor($summer_tier_one);
        }
        elseif (($summer_usage >= 40) && ($summer_usage < 100)) {
            $summer_tier_two = (($summer_usage - 40) / $withoutSolar_tier2_hot_multiplier);
            $summer_usage = floor($summer_tier_one + $summer_tier_two);
        }
        elseif ($summer_usage >= 100) {
            $summer_tier_three = (($summer_usage - 100) / $withoutSolar_tier3_hot_multiplier);
            $summer_usage = floor($summer_tier_one + $summer_tier_two + $summer_tier_three);
        }

        // Winter conversion from dollar to kwh
        if ($winter_usage <= 40) {
            $winter_tier_one = $winter_usage / $withoutSolar_tier1_multiplier;
            $winter_usage = floor($winter_tier_one);
        }
        elseif ($winter_usage > 40 )  {
            $winter_tier_two = (($winter_usage - 40) / $withoutSolar_tier2_multiplier);
            $winter_usage = floor($winter_tier_two + $winter_tier_one);
        }


        //Get summer and winter dates
        $summerdate = date("F", strtotime("May 1st"));
        $winterdate = date("F", strtotime("October 30"));

        //Get recommended blocks (this assumes these values are kwh used)
        $total_usage = array($summer_usage, $winter_usage);
        $recommended_seasonal_blocks = get_recommended_blocks($total_usage);
        $max_seasonal_blocks = get_max_blocks($total_usage);



        //Create usage data array for solar calculator
        $usage_data = array(
            0 => array(
                'accounting_period' => $summerdate,
                'kwh_usage' => $summer_usage,
                'without_solar' => $form_state['values']['step_1']['monthly_summer'],
            ),
            1 => array(
                'accounting_period' => $winterdate,
                'kwh_usage' => $winter_usage,
                'without_solar' => $form_state['values']['step_1']['monthly_winter'],
            )
        );


        //Save the usage data to use later
        _subsolar_seasonal_form_session('raw_data', $usage_data);
        _subsolar_seasonal_form_session('rec_blocks', $recommended_seasonal_blocks);
        _subsolar_seasonal_form_session('max_blocks', $max_seasonal_blocks);

        //Send usage data and recommended blocks to subsolar_seasonal_form.js
        drupal_add_js(array('usage_data' => $usage_data), 'setting');
        drupal_add_js(array('recommended_seasonal_blocks' => $recommended_seasonal_blocks), 'setting');


        //Move the form forward one step
        $form_state['step']++;

    } else if(isset($form_state['values']['step_2']['processed-billing-data'])) {

        //Save to form storage so value persists
        $form_state['storage']['step_2']['processed-billing-data'] = $form_state['values']['step_2']['processed-billing-data'];
        $form_state['storage']['usage_table_data'] = process_seasonal_usage_data($form_state['storage']['step_2']['processed-billing-data']);
    }

    // Check to see if the next/forward button was clicked
    elseif(isset($form_state['values']['forward']) && $form_state['values']['op'] == $form_state['values']['forward']) {
        // Increase the step by one, to move on to the next step
        $form_state['step']++;
    }

    $form_state['rebuild'] = TRUE;

}

/**
 * On submit function  form back button
 */
function subsolar_seasonal_form_back_submit($form, &$form_state) {

    //reduce step by one
    $form_state['step']--;

    $form_state['rebuild'] = TRUE;
}

/**
 * On submit function for last step of form
 */
function subsolar_seasonal_form_finish_submit($form, &$form_state){

    $form_state['storage'] = array();
    drupal_goto('/');

}

//AJAX form callback function
function subsolar_seasonal_form_ajax_callback($form, $form_state) {
    return $form;
}


//AJAX callback function to update the usage table when there's new data
function seasonal_block_slider_change_ajax_form_callback($form, $form_state) {
    $commands = array();

    //We are sending the usage_data and solarBlocks_number data from the module to the response parameter batchSeasonalSlideCalculator function in subsolar_form.js
    $commands [] = array (
        'command' => 'batchSeasonalSlideCalculator',
        'usage_data' => $_SESSION['raw_data'],
        'solarBlocks_number' =>  $form_state['values']['step_2']['block_slider'],
    );
    return array('#type' => 'ajax', '#commands' => $commands);
}
